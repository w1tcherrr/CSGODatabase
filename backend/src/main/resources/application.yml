logging:
  file.name: ./log/backend.log
  level:
    # put this on 'INFO' to be on, on 'OFF' to be off
    root: INFO

user-properties:
  # the max amount of csgo accounts the database can store
  max-csgo-accounts: 2000000
  # the maximum amount of accounts to be mapped in the current session - the mapping terminates after the specified amount
  # accounts WITHOUT inventories are also counted! This is mostly for purposes of testing the performance! Put this to the same
  # amount as max-csgo-accounts if you don't want to measure performance.
  max-accounts-for-session: 2000000
  # the minimum items in an inventory for the accounts inventory to be stored (to filter out empty accounts)
  min-items-per-account: 5
  # maximum amount of ids to be selected per batch
  max-ids-per-batch: 50
  # the minimum amount of unmapped steam ids to be kept as a buffer (should be bigger than max-ids-per-batch * amount-of-threads)
  account-buffer-size: 50000
  # the amount of threads the application uses to map accounts
  amount-of-threads: 500
  # the amount of proxies the application uses - the proxies are spread evenly over the threads if the thread-number is
  # smaller than the proxy number. E.G.: 100, 100 -> One thread/One proxy; 20,100 -> One thread, Five proxies (Round Robin)
  # General rule: amount-of-proxies % amount-of-threads should be 0 (even distribution)!
  amount-of-proxies: 500
  # the maximum amount of proxies to be read from the proxies file
  max-proxies: 500

spring:
  h2:
    console:
      enabled: true
      path: /h2
  datasource:
    url: jdbc:h2:file:./database/db;AUTO_SERVER=TRUE;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    driver-class-name: org.h2.Driver
    username: admin
    password: password
  jpa:
    # Set this property to true if you want to see the executed queries
    show-sql: false
    hibernate:
      ddl-auto: update
    # Allows to fetch lazy properties outside the original transaction. Although this sounds helpful, the property
    # is disabled since it breaks the principle of least astonishment and leads to bad performance.
    open-in-view: false

security:
  auth:
    header: Authorization
    prefix: "Bearer "
    login-uri: /api/v1/authentication
  jwt:
    # Use http://www.allkeysgenerator.com/ to generate secrets
    secret: ?E(H+MbQeThWmZq4t7w!z%C*F-J@NcRfUjXn2r5u8x/A?D(G+KbPdSgVkYp3s6v9
    type: JWT
    issuer: secure-backend
    audience: secure-app
    # 12 hours in milliseconds
    expiration-time: 43200000

management:
  server:
    port: 8091
  endpoint:
    shutdown:
      enabled: true
    metrics:
      enabled: true
    prometheus:
      enabled: true
    health:
      probes:
        enabled: true
  endpoints:
    web:
      exposure:
        include:
          - health
          - info
          - shutdown
          - metrics
          - env
  metrics:
    export:
      prometheus:
        enabled: true

---
spring:
  config:
    activate:
      on-cloud-platform: kubernetes
  lifecycle:
    timeout-per-shutdown-phase: 30s
server:
  shutdown: graceful
